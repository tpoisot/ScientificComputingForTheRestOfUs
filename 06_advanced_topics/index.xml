<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://sciencecomputing.io/06_advanced_topics/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sciencecomputing.io/06_advanced_topics/index.xml" rel="self" type="application/rss+xml"/><item><title>Advanced string manipulation</title><link>https://sciencecomputing.io/advanced-topics/advanced-string-manipulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sciencecomputing.io/advanced-topics/advanced-string-manipulation/</guid><description/></item><item><title>Finding things in arrays</title><link>https://sciencecomputing.io/advanced-topics/finding-things-in-arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sciencecomputing.io/advanced-topics/finding-things-in-arrays/</guid><description>&lt;p>In this module, we will see how to locate interesting values in collections,
and how to extract and test the existence of some of these values. This is
important knowledge in order to build more advanced programs, and we will put
it in action in the following section.&lt;/p></description></item><item><title>Growing arrays</title><link>https://sciencecomputing.io/advanced-topics/growing-arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sciencecomputing.io/advanced-topics/growing-arrays/</guid><description/></item><item><title>List comprehensions</title><link>https://sciencecomputing.io/advanced-topics/list-comprehensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sciencecomputing.io/advanced-topics/list-comprehensions/</guid><description/></item><item><title>Map, Filter, Accumulate, Reduce</title><link>https://sciencecomputing.io/advanced-topics/map-filter-accumulate-reduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sciencecomputing.io/advanced-topics/map-filter-accumulate-reduce/</guid><description>&lt;p>In a lot of applications, we want to apply some operation to all elements in a
collection, and then aggregate these elements together in a grand unified
answer. In this module, we will have a look at the map-filter-reduce strategy,
as well as the accumulate operation.&lt;/p></description></item><item><title>Overloading</title><link>https://sciencecomputing.io/advanced-topics/overloading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sciencecomputing.io/advanced-topics/overloading/</guid><description>&lt;p>Overloading is a &lt;em>very&lt;/em> powerful mechanism, through which we can add methods
to existing functions to make them work with our own types. In this module, we
will discuss how to overload existing functions, and how to use this approach
in practice.&lt;/p></description></item></channel></rss>